import { createAsyncThunk, createSlice } from "@reduxjs/toolkit"
import { RootState } from "../../app/store"
import { fetchPosts, createPost } from "./postsAPI"
import { PostContents } from "./types"
import { AddPostFormState } from "../../components/addPost/addPostForm"

export interface State {
  posts: [] | PostContents[]
  status: "idle" | "loading" | "failed" | "success"
  createPostStatus: "idle" | "loading" | "failed" | "success"
}

const initialState: State = {
  posts: [],
  status: "idle",
  createPostStatus: "idle",
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchPostsAsync = createAsyncThunk(
  "posts/fetchPosts",
  async () => {
    const response = await fetchPosts()
    // The value we return becomes the `fulfilled` action payload
    return response.data
  },
)

export const createPostAsync = createAsyncThunk(
  "posts/createPost",
  async (data: AddPostFormState) => {
    const response = await createPost(data)
    return response.data
  },
)

export const postsSlice = createSlice({
  name: "posts",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchPostsAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(fetchPostsAsync.fulfilled, (state, action) => {
        state.status = "success"
        state.posts = action.payload
      })
      .addCase(fetchPostsAsync.rejected, (state) => {
        state.status = "failed"
      })
      .addCase(createPostAsync.pending, (state) => {
        state.createPostStatus = "loading"
      })
      .addCase(createPostAsync.fulfilled, (state, action) => {
        state.createPostStatus = "success"
        state.posts = [action.payload, ...state.posts]
      })
      .addCase(createPostAsync.rejected, (state) => {
        state.createPostStatus = "failed"
      })
  },
})

export const postsStateSelector = (state: RootState) => state.posts

export default postsSlice.reducer
